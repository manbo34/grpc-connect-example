package main

import (
	"context"
	"fmt"
	"github.com/bufbuild/connect-go"
	"github.com/rs/cors"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"log"
	"net/http"
	"time"

	greetv1 "example/gen/greet/v1"        // generated by protoc-gen-go
	"example/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
)

type GreetServer struct{}

func (s *GreetServer) Greet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	//res.Header().Set("Access-Control-Allow-Origin", "http://localhost:5173")
	log.Println(fmt.Sprintf("Hello, %s!", req.Msg.Name))
	return res, nil
}

var introResponses = []string{
	"Hi %s. I'm Eliza.",
	"Before we begin, %s, let me tell you something about myself.",
}

// GetIntroResponses returns a collection of introductory responses tailored to the given name.
func GetGreetStreamResponses(name string) []string {
	intros := make([]string, 0, len(introResponses)+1)
	for _, n := range introResponses {
		intros = append(intros, fmt.Sprintf(n, name))
	}

	intros = append(intros, "How are you feeling today?")
	return intros
}

func (s *GreetServer) GreetStream(
	ctx context.Context,
	req *connect.Request[greetv1.GreetStreamRequest],
	stream *connect.ServerStream[greetv1.GreetStreamResponse],
) error {
	streamDelay := 1
	name := req.Msg.Name
	if name == "" {
		name = "Anonymous User"
	}
	fmt.Println("*************************")
	fmt.Println(req.Header().Get("user_id"))

	intros := GetGreetStreamResponses(name)
	var ticker *time.Ticker
	//if e.streamDelay > 0 {
	if streamDelay > 0 {
		ticker = time.NewTicker(time.Duration(streamDelay))
		defer ticker.Stop()
	}
	for _, resp := range intros {
		if ticker != nil {
			select {
			case <-ctx.Done():
				return ctx.Err()
			case <-ticker.C:
			}
		}
		if err := stream.Send(&greetv1.GreetStreamResponse{Greeting: resp}); err != nil {
			return err
		}
	}
	return nil
}

func main() {
	fmt.Println("***START**********************")
	greeter := &GreetServer{}
	mux := http.NewServeMux()
	path2, handler2 := greetv1connect.NewGreetStreamServiceHandler(greeter)
	mux.Handle(path2, handler2)
	path, handler := greetv1connect.NewGreetServiceHandler(greeter)
	mux.Handle(path, handler)
	c := cors.New(cors.Options{
		AllowedOrigins: []string{"*"},
		AllowedMethods: []string{"POST", "OPTIONS"},
		AllowOriginFunc: func(origin string) bool {
			return true
		},
		AllowedHeaders: []string{"Connect-Protocol-Version", "Content-Type", "user_id", "Authorization"},
		// Enable Debugging for testing, consider disabling in production
		Debug: true,
	})
	corsHandler := c.Handler(h2c.NewHandler(mux, &http2.Server{}))
	//corsHandler := cors.Default().Handler(h2c.NewHandler(mux, &http2.Server{}))
	// corsHandler := h2c.NewHandler(mux, &http2.Server{}) // もとの実装はこれ
	http.ListenAndServe(
		":8080",
		corsHandler,
	)
}
